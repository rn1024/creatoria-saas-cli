version: '3.8'

services:
  app:
    build: .
    container_name: creatoria-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - API_PREFIX=api
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - DB_DATABASE=creatoria
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - JWT_SECRET=your-secret-key-change-this
      - SWAGGER_ENABLED=true
      - MULTI_TENANT_ENABLED=true
    depends_on:
      - postgres
      - redis
      - rabbitmq
    volumes:
      - ./modules:/app/modules
    networks:
      - creatoria-network
    restart: unless-stopped

  postgres:
    image: postgres:14-alpine
    container_name: creatoria-postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=creatoria
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - creatoria-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: creatoria-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - creatoria-network
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: creatoria-rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - creatoria-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:

networks:
  creatoria-network:
    driver: bridge